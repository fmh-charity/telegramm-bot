import logging
from logging.config import fileConfig

from aiogram import Router, types, F
from aiogram.dispatcher.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from psycopg2.extras import DictRow

from bot import postgre_db
from bot.h_cb_data import CallbackPage

fileConfig('logging.ini', disable_existing_loggers=False)
log = logging.getLogger(__name__)
router = Router()
db = postgre_db.Singleton()


def get_start_buttons():
    builder = ReplyKeyboardBuilder()
    line1 = []
    line2 = []
    line3 = []
    line4 = []
    design_button = types.KeyboardButton(text='üßë‚Äçüé® –î–∏–∑–∞–π–Ω')
    analytics_button = types.KeyboardButton(text='üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
    # chat_button = types.KeyboardButton(text='üìü –û–±—â–∏–π —á–∞—Ç')
    owner_button = types.KeyboardButton(text='üìü –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
    line1.append(design_button)
    line1.append(analytics_button)
    line1.append(owner_button)
    # line1.append(chat_button)
    builder.row(*line1)
    map_button = types.KeyboardButton(text='üó∫ –ö–∞—Ä—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∞')
    line2.append(map_button)
    # trello_button = types.KeyboardButton(text='üìä Trello')
    # line2.append(trello_button)
    about_button = types.KeyboardButton(text='‚Ñ¢Ô∏è –û –ø—Ä–æ–µ–∫—Ç–µ')
    line2.append(about_button)
    builder.row(*line2)
    develop_button = types.KeyboardButton(text='üõ† –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞')
    github_button = types.KeyboardButton(text='üìù GitHub')
    line3.append(develop_button)
    line3.append(github_button)
    builder.row(*line3)
    # swagger_button = types.KeyboardButton(text='Swagger')
    test_cred_button = types.KeyboardButton(text='üîê –£—á–µ—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
    line4.append(test_cred_button)
    builder.row(*line4)

    return builder.as_markup(resize_keyboard=True)


def get_develop_buttons():
    builder = ReplyKeyboardBuilder()
    line1 = []
    line2 = []
    line3 = []
    line4 = []
    web_button = types.KeyboardButton(text='üåê Web')
    backend_button = types.KeyboardButton(text='üîôüîö Backend')
    line1.append(web_button)
    line1.append(backend_button)
    builder.row(*line1)
    ios_button = types.KeyboardButton(text='üì± ios —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')
    android_button = types.KeyboardButton(text='üì± android —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')
    line2.append(ios_button)
    line2.append(android_button)
    builder.row(*line2)
    swagger_button = types.KeyboardButton(text='üßë‚Äçüíª Swagger Test')
    github_button = types.KeyboardButton(text='üìù GitHub')
    line3.append(swagger_button)
    line3.append(github_button)
    builder.row(*line3)
    main_back_button = types.KeyboardButton(text='üèö –ù–∞ –≥–ª–∞–≤–Ω—É—é')
    line4.append(main_back_button)
    builder.row(*line4)

    return builder.as_markup(resize_keyboard=True)


@router.callback_query(CallbackPage.filter(F.action == 'main'))
async def analytics_page_callback(call: types.CallbackQuery):
    await call.answer('üèö –ù–∞ –≥–ª–∞–≤–Ω—É—é')
    await bot_main_page_handler(call.message)


@router.message(F.chat.type == 'private', F.text == 'üèö –ù–∞ –≥–ª–∞–≤–Ω—É—é')
@router.message(F.chat.type == 'private', Command(commands="start"))
async def bot_main_page_handler(message: types.Message):
    text = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ö–æ—Å–ø–∏—Å–∞!\n'
    text += '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.'
    mc = message.chat
    uid = mc.id
    # id, user_id, main_uid, username, name, squad_id, squad_tag, squad_name
    user = db.users_get_by_uid(uid)
    if user is None:
        db.users_add_new_on_start(uid, mc.username, mc.first_name, mc.last_name)
    await message.answer(text, reply_markup=get_start_buttons())


@router.message(F.chat.type == 'private', Command(commands="buttons"))
async def bot_main_page_handler(message: types.Message):
    text = '‚å®Ô∏è–ö–Ω–æ–ø–æ—á–∫–∏.\n'
    mc = message.chat
    uid = mc.id
    # id, user_id, main_uid, username, name, squad_id, squad_tag, squad_name
    user = db.users_get_by_uid(uid)
    if user is None:
        db.users_add_new_on_start(uid, mc.username, mc.first_name, mc.last_name)
    await message.answer(text, reply_markup=get_start_buttons())


@router.message(F.chat.type == 'private', F.text == 'üßë‚Äçüé® –î–∏–∑–∞–π–Ω')
async def design_page_handler(message: types.Message):
    text = 'üßë‚Äçüé® –î–∏–∑–∞–π–Ω.\n\n'
    text += '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç'
    # —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∏–≥–º—ã
    builder = InlineKeyboardBuilder()
    link_keys = ['figma_web_link', 'figma_backend_link', 'figma_ios_link', 'figma_android_link']
    for key in link_keys:
        # id, url_key, url, "label"
        link_fdb: DictRow = db.ui_links_get_by_key(key)
        target_text = link_fdb.get('label')
        target_link = link_fdb.get('url')
        button = types.InlineKeyboardButton(text=target_text, url=target_link)
        builder.row(button)
    await message.answer(text, reply_markup=builder.as_markup())


@router.message(F.chat.type == 'private', F.text == 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
async def analytics_page_handler(message: types.Message):
    text = 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞.\n\n'
    text += '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç'
    # —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∏–≥–º—ã
    builder = InlineKeyboardBuilder()
    builder.adjust(2)
    link_keys = ['analytics_knowledge_base', 'analytics_request_access', 'chat_analytics', 'trello_analytics_link',
                 'prod_map_miro_link']
    for key in link_keys:
        button = get_inline_button_by_type(key)
        builder.row(button)
    await message.answer(text, reply_markup=builder.as_markup())


@router.callback_query(CallbackPage.filter(F.action == 'analytics'))
async def analytics_page_callback(call: types.CallbackQuery):
    text = '–ß—Ç–æ-—Ç–æ –Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–º'
    await call.message.answer(text, reply_markup=get_start_buttons())
    await call.answer('‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞')


@router.callback_query(CallbackPage.filter(F.action == 'prod_map'))
async def prod_map_page_callback(call: types.CallbackQuery):
    await call.answer('üó∫ –ö–∞—Ä—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∞')
    await product_map_page_handler(call.message)


@router.message(F.chat.type == 'private', F.text == 'üìü –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
async def product_owner_page_handler(message: types.Message):
    text = 'üìü –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n'
    text += 'TBA'
    await message.answer(text, reply_markup=get_start_buttons())


@router.message(F.chat.type == 'private', F.text == 'üó∫ –ö–∞—Ä—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∞')
async def product_map_page_handler(message: types.Message):
    text = 'üó∫ –ö–∞—Ä—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∞\n'
    text += '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø—Ä–æ—Å–ª–µ–¥—É–π—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ'
    builder = InlineKeyboardBuilder()
    builder.adjust(2)
    link_keys = ['prod_map_miro_link']
    for key in link_keys:
        # id, url_key, url, "label"
        link_fdb: DictRow = db.ui_links_get_by_key(key)
        target_text = link_fdb.get('label')
        target_link = link_fdb.get('url')
        button = types.InlineKeyboardButton(text=target_text, url=target_link)
        builder.row(button)
    await message.answer(text, reply_markup=builder.as_markup())


@router.message(F.chat.type == 'private', F.text == '‚Ñ¢Ô∏è –û –ø—Ä–æ–µ–∫—Ç–µ')
async def about_page_handler(message: types.Message):
    text = '''‚Ñ¢Ô∏è –û –ø—Ä–æ–µ–∫—Ç–µ

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "–í —Ö–æ—Å–ø–∏—Å–µ" —ç—Ç–æ –µ–¥–∏–Ω–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Ö–æ—Å–ø–∏—Å–∞ –∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤, –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏ –∏—Ö —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤.
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –ø–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π: –æ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∂–∏–∑–Ω–∏ —Ö–æ—Å–ø–∏—Å–∞ –¥–æ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á –∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
¬´–í —Ö–æ—Å–ø–∏—Å–µ¬ª –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —Ä—É—Ç–∏–Ω—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏.

*–£–∑–Ω–∞–≤–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ –∂–∏–∑–Ω–∏ —Ö–æ—Å–ø–∏—Å–∞
*–û–ø–æ–≤–µ—â–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
*–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤
*–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –æ–±–º–µ–Ω–∏–≤–∞–π—Ç–µ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
*–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
*–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 
*–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–æ—Å—å–±—ã –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤. 

–ü–æ–ª—É—á–µ–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≠–í–ú ‚Ññ2021669868'''
    builder = ReplyKeyboardBuilder()
    builder.button(text='‚ÑπÔ∏è–£–∑–Ω–∞—Ç—å –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–æ–ª—å—à–µ')
    builder.button(text='üë®‚Äçüë®‚Äçüë¶‚Äçüë¶ –û –∫–æ–º–∞–Ω–¥–µ')
    builder.button(text='üóΩ –û–± Open Source')
    builder.button(text='üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏')
    builder.button(text='üèö –ù–∞ –≥–ª–∞–≤–Ω—É—é')
    builder.adjust(2)
    await message.answer(text, reply_markup=builder.as_markup(resize_keyboard=True))


@router.message(F.chat.type == 'private', F.text == 'üë®‚Äçüë®‚Äçüë¶‚Äçüë¶ –û –∫–æ–º–∞–Ω–¥–µ')
async def about_team_handler(message: types.Message):
    text = '''üë®‚Äçüë®‚Äçüë¶‚Äçüë¶ –û –∫–æ–º–∞–Ω–¥–µ

–í –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤—Ö–æ–¥—è—Ç: –†–ü, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –¥–∏–∑–∞–π–Ω–µ—Ä—ã.
–í–µ—Ä–∏–º, —á—Ç–æ —Å–æ–∑–∏–¥–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–µ—Å–∫–æ—Ä—ã—Å—Ç–Ω—ã–º.
–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ–π –æ—Å–Ω–æ–≤–µ. 

–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ —Ä–∞–∑–≤–∏–≤–∞—Ç—å, –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å –∑–Ω–∞–Ω–∏—è –∏ –¥–µ–ª–∞—Ç—å —É–¥–æ–±–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è!
–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ!
'''
    await message.answer(text)


@router.message(F.chat.type == 'private', F.text == 'üóΩ –û–± Open Source')
async def about_opensource_handler(message: types.Message):
    text = '''üóΩ –û–± Open Source

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´–í —Ö–æ—Å–ø–∏—Å–µ¬ª —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–∞ –±–∞–∑–µ Open Source.
–ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π  –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ–¥–µ, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω–æ, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.
–õ—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É, –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –Ω–∞ –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ–π –æ—Å–Ω–æ–≤–µ.
'''
    await message.answer(text)


@router.message(F.chat.type == 'private', F.text == 'üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏')
async def about_tech_component_handler(message: types.Message):
    text = '''üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏

–ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–µ, –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤–µ–± –∏ –º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è. 
–í–µ–±-–≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ React, –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (Android) - –Ω–∞ Kotlin. –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ –Ω–∞ Github.
–î–ª—è —Ä–∞–±–æ—Ç—ã backend –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–µ–∫: spring boot, java 11, hibernate, postgresql, docker. 
–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —è–∑—ã–∫–∏: React, React Router, Redux, Redux Toolkit, Redux Toolkit Query, Eslint, Prettier, Typescript, Jest, React Testing Library, Less, Webpack
–°–µ—Ä–≤–∏—Å—ã —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ docker compose —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CI/CD –Ω–∞ Github, –∞ –∫–∞–∂–¥—ã–π pull request –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è.
'''
    await message.answer(text)


@router.message(F.chat.type == 'private', F.text == '‚ÑπÔ∏è–£–∑–Ω–∞—Ç—å –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–æ–ª—å—à–µ')
async def about_page_extend_handler(message: types.Message):
    text = '''‚ÑπÔ∏è–£–∑–Ω–∞—Ç—å –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–æ–ª—å—à–µ

–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ –æ –ø—Ä–æ–µ–∫—Ç–µ –ø–∏—à—É—Ç –≤ —Å–µ—Ç–∏ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Å—Å—ã–ª–∫–∞–º
'''
    builder = InlineKeyboardBuilder()
    builder.adjust(2)
    link_keys = ['about_lenta_ru_01', 'about_iteco_inno_ru_01']
    for key in link_keys:
        # id, url_key, url, "label"
        link_fdb: DictRow = db.ui_links_get_by_key(key)
        target_text = link_fdb.get('label')
        target_link = link_fdb.get('url')
        button = types.InlineKeyboardButton(text=target_text, url=target_link)
        builder.row(button)
    await message.answer(text, reply_markup=builder.as_markup())


@router.message(F.chat.type == 'private', F.text == 'üõ† –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞')
async def develop_page_handler(message: types.Message):
    text = 'üõ† –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n'
    text += '–¢—É—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å—Å—ã–ª–∫–∏ –ø–æ —Ç–µ–∫—É—â–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
    await message.answer(text, reply_markup=get_develop_buttons())


@router.message(F.chat.type == 'private', F.text == 'üìù GitHub')
async def github_page_handler(message: types.Message):
    text = 'üìù GitHub\n'
    text += '–¢—É—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ–µ–∫—Ç—É –∏ —Å—Å—ã–ª–∫–∏ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º'
    builder = InlineKeyboardBuilder()
    # id, url_key, url, "label"
    link_g: DictRow = db.ui_links_get_by_key('github_main_link')
    g_button = types.InlineKeyboardButton(text=link_g.get('label'), url=link_g.get('url'))
    builder.row(g_button)
    link_gf: DictRow = db.ui_links_get_by_key('github_frontend_link')
    mw_button = types.InlineKeyboardButton(text='üåê Web', callback_data=CallbackPage(action='front').pack())
    gw_button = types.InlineKeyboardButton(text=link_gf.get('label'), url=link_gf.get('url'))
    builder.row(mw_button, gw_button)
    link_gb: DictRow = db.ui_links_get_by_key('github_backend_link')
    mb_button = types.InlineKeyboardButton(text='üîôüîö Backend', callback_data=CallbackPage(action='back').pack())
    gb_button = types.InlineKeyboardButton(text=link_gb.get('label'), url=link_gb.get('url'))
    builder.row(mb_button, gb_button)
    link_gi: DictRow = db.ui_links_get_by_key('github_ios_link')
    mi_button = types.InlineKeyboardButton(text='üì± ios —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', callback_data=CallbackPage(action='ios').pack())
    gi_button = types.InlineKeyboardButton(text=link_gi.get('label'), url=link_gi.get('url'))
    builder.row(mi_button, gi_button)
    link_ga: DictRow = db.ui_links_get_by_key('github_android_link')
    ma_button = types.InlineKeyboardButton(text='üì± android —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
                                           callback_data=CallbackPage(action='android').pack())
    ga_button = types.InlineKeyboardButton(text=link_ga.get('label'), url=link_ga.get('url'))
    builder.row(ma_button, ga_button)
    mm_button = types.InlineKeyboardButton(text='üèö –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data=CallbackPage(action='main').pack())
    builder.row(mm_button)
    await message.answer(text, reply_markup=builder.as_markup())


@router.message(F.chat.type == 'private', F.text == 'üîê –£—á–µ—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
async def test_app_cred_page_handler(message: types.Message):
    text = 'üîê –£—á–µ—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n'
    text += '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –£–ó –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
    text += '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É'
    builder = InlineKeyboardBuilder()
    # id, url_key, url, "label"
    link_cred: DictRow = db.ui_links_get_by_key('test_app_credentials_request')
    button = types.InlineKeyboardButton(text=link_cred.get('label'),
                                        callback_data=CallbackPage(action='get_test_cred').pack())
    builder.row(button)
    await message.answer(text, reply_markup=builder.as_markup())


@router.callback_query(CallbackPage.filter(F.action == 'front'))
async def web_dev_page_callback(call: types.CallbackQuery):
    await call.answer('üåê Web')
    await web_dev_page_handler(call.message)


@router.message(F.chat.type == 'private', F.text == 'üåê Web')
async def web_dev_page_handler(message: types.Message):
    text = 'üåê Web\n\n'
    text += '–ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º'
    builder = InlineKeyboardBuilder()
    # id, url_key, url, "label"
    link_f: DictRow = db.ui_links_get_by_key('figma_web_link')
    builder.button(text=link_f.get('label'), url=link_f.get('url'))
    link_t: DictRow = db.ui_links_get_by_key('trello_frontend_link')
    builder.button(text=link_t.get('label'), url=link_t.get('url'))
    link_c: DictRow = db.ui_links_get_by_key('chat_frontend')
    builder.button(text=link_c.get('label'), url=link_c.get('url'))
    link_g: DictRow = db.ui_links_get_by_key('github_frontend_link')
    builder.button(text=link_g.get('label'), url=link_g.get('url'))
    link_a: DictRow = db.ui_links_get_by_key('frontend_access_link')
    builder.button(text=link_a.get('label'), url=link_a.get('url'))
    builder.adjust(1)

    builder = InlineKeyboardBuilder()
    builder.adjust(2)
    link_keys = ['figma_web_link', 'trello_frontend_link', 'chat_frontend', 'github_frontend_link',
                 'frontend_access_link', 'frontend_system_requirements_link', 'prod_map_miro_link']
    for key in link_keys:
        # id, url_key, url, "label"
        link_fdb: DictRow = db.ui_links_get_by_key(key)
        target_text = link_fdb.get('label')
        target_link = link_fdb.get('url')
        button = types.InlineKeyboardButton(text=target_text, url=target_link)
        builder.row(button)

    await message.answer(text, reply_markup=builder.as_markup())


@router.callback_query(CallbackPage.filter(F.action == 'back'))
async def backend_page_callback(call: types.CallbackQuery):
    await call.answer('üîôüîö Backend')
    await backend_page_handler(call.message)


@router.message(F.chat.type == 'private', F.text == 'üîôüîö Backend')
async def backend_page_handler(message: types.Message):
    text = 'üîôüîö Backend\n\n'
    text += '–ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º'
    # id, url_key, url, "label"
    builder = InlineKeyboardBuilder()
    builder.adjust(1)
    link_keys = ['figma_backend_link', 'trello_backend_link', 'chat_backend', 'github_backend_link',
                 'backend_knowledge_base_link', 'prod_map_miro_link', 'backend_access_link',
                 'swagger_link', 'test_web_app_link', 'app_prod_link', 'get_test_cred']
    for key in link_keys:
        button = get_inline_button_by_type(key)
        builder.row(button)
    await message.answer(text, reply_markup=builder.as_markup())


@router.callback_query(CallbackPage.filter(F.action == 'get_test_cred'))
async def test_cred_page_callback(call: types.CallbackQuery):
    creds_fdb: list = db.ui_form_get_values_by_key('test_app_credentials_request')
    text: str = ''
    for cred_fdb in creds_fdb:  # type: DictRow
        text += cred_fdb.get('value')
    await call.answer(text, show_alert=True)


@router.callback_query(CallbackPage.filter(F.action == 'get_test_flight_app'))
async def test_flight_app_page_callback(call: types.CallbackQuery):
    test_flights_fdb: list = db.ui_form_get_values_by_key('get_test_flight_app')
    text: str = ''
    for test_flight_fdb in test_flights_fdb:  # type: DictRow
        text += test_flight_fdb.get('value')
    await call.answer(text, show_alert=True)
    # await ios_dev_page_handler(call.message)


@router.callback_query(CallbackPage.filter(F.action == 'ios'))
async def ios_page_callback(call: types.CallbackQuery):
    await call.answer('üì± ios —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')
    await ios_dev_page_handler(call.message)


@router.message(F.chat.type == 'private', F.text == 'üì± ios —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')
async def ios_dev_page_handler(message: types.Message):
    text = 'üì± ios —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n\n'
    text += '–ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º'

    builder = InlineKeyboardBuilder()
    builder.adjust(1)
    link_keys = ['figma_ios_link', 'trello_ios_link', 'chat_ios', 'github_ios_link',
                 'prod_map_miro_link', 'ios_access_link',
                 'swagger_link', 'ios_knowledge_base_link', 'ios_TestFlight_link']
    for key in link_keys:
        button = get_inline_button_by_type(key)
        builder.row(button)

    await message.answer(text, reply_markup=builder.as_markup())


def get_inline_button_by_type(key):
    # id, url_key, url, "label"
    link_fdb: DictRow = db.ui_links_get_by_key(key)
    target_text = link_fdb.get('label')
    target_link: str = link_fdb.get('url')
    if target_link.lower().startswith('https://'):
        return types.InlineKeyboardButton(text=target_text, url=target_link)
    elif target_link.lower().startswith('http://'):
        return types.InlineKeyboardButton(text=target_text, url=target_link)
    elif target_link.lower().startswith('@'):
        return types.InlineKeyboardButton(text=target_text, url=target_link)
    else:
        return types.InlineKeyboardButton(text=target_text,
                                          callback_data=CallbackPage(action=target_link).pack())


@router.callback_query(CallbackPage.filter(F.action == 'android'))
async def android_page_callback(call: types.CallbackQuery):
    await call.answer('üì± android —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')
    await android_dev_page_handler(call.message)


@router.message(F.chat.type == 'private', F.text == 'üì± android —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')
async def android_dev_page_handler(message: types.Message):
    text = 'üì± android —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n\n'
    text += '–ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º'
    builder = InlineKeyboardBuilder()
    builder.adjust(1)
    link_keys = ['chat_android', 'trello_android_link', 'github_android_link', 'figma_android_link',
                 'android_knowledge_base_link', 'prod_map_miro_link', 'android_access_link',
                 'swagger_link']
    for key in link_keys:
        button = get_inline_button_by_type(key)
        builder.row(button)
    await message.answer(text, reply_markup=builder.as_markup())


@router.message(F.chat.type == 'private', F.text == 'üßë‚Äçüíª Swagger Test')
async def swagger_page_handler(message: types.Message):
    text = 'üßë‚Äçüíª Swagger Test\n\n'
    text += '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ swagger –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ'
    builder = InlineKeyboardBuilder()
    # id, url_key, url, "label"
    link_a: DictRow = db.ui_links_get_by_key('swagger_link')
    builder.button(text=link_a.get('label'), url=link_a.get('url'))
    builder.adjust(1)
    await message.answer(text, reply_markup=builder.as_markup())
